
import java.util.Scanner;

public class Battleship {
    static final int BOARD_SIZE = 5;
    static final char EMPTY = '-';
    static final char SHIP = 'S';
    static final char HIT = 'X';
    static final char MISS = 'O';

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        char[][] player1Board = new char[BOARD_SIZE][BOARD_SIZE];
        char[][] player2Board = new char[BOARD_SIZE][BOARD_SIZE];

        System.out.println("Player 1, place your ships:");
        initializeBoard(player1Board);
        displayBoard(player1Board);
        placeShips(player1Board, scanner);

        System.out.println("\nPlayer 2, place your ships:");
        initializeBoard(player2Board);
        displayBoard(player2Board);
        placeShips(player2Board, scanner);

        playGame(player1Board, player2Board, scanner);

        scanner.close();
    }

    static void initializeBoard(char[][] board) {
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                board[i][j] = EMPTY;
            }
        }
    }

    static void displayBoard(char[][] board) {
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }

    static void placeShips(char[][] board, Scanner scanner) {
        for (int shipSize = 1; shipSize <= 3; shipSize++) {
            System.out.println("Place a ship of size " + shipSize);
            for (int i = 0; i < shipSize; i++) {
                System.out.print("Enter row and column (0-4): ");
                int row = scanner.nextInt();
                int col = scanner.nextInt();
                if (row < 0 || row >= BOARD_SIZE || col < 0 || col >= BOARD_SIZE || board[row][col] != EMPTY) {
                    System.out.println("Invalid position. Try again.");
                    i--;
                } else {
                    board[row][col] = SHIP;
                }
            }
            displayBoard(board);
        }
    }

    static void playGame(char[][] player1Board, char[][] player2Board, Scanner scanner) {
        boolean player1Turn = true;

        while (!gameOver(player1Board) && !gameOver(player2Board)) {
            char[][] currentBoard = player1Turn ? player2Board : player1Board;
            char[][] opponentBoard = player1Turn ? player1Board : player2Board;
            String playerName = player1Turn ? "Player 1" : "Player 2";

            System.out.println("\n" + playerName + ", it's your turn:");
            System.out.println("Your board:");
            displayBoard(currentBoard);
            System.out.println("Opponent's board:");
            displayBoard(opponentBoard);

            System.out.print("Enter row and column to guess: ");
            int row = scanner.nextInt();
            int col = scanner.nextInt();

            if (row < 0 || row >= BOARD_SIZE || col < 0 || col >= BOARD_SIZE) {
                System.out.println("Invalid position. Try again.");
                continue;
            }

            if (opponentBoard[row][col] == EMPTY) {
                System.out.println("Miss!");
                opponentBoard[row][col] = MISS;
            } else if (opponentBoard[row][col] == SHIP) {
                System.out.println("Hit!");
                opponentBoard[row][col] = HIT;
            } else {
                System.out.println("Already guessed this position. Try again.");
                continue;
            }

            player1Turn = !player1Turn;
        }

        if (gameOver(player1Board)) {
            System.out.println("Player 2 wins!");
        } else {
            System.out.println("Player 1 wins!");
        }
    }

    static boolean gameOver(char[][] board) {
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                if (board[i][j] == SHIP) {
                    return false;
                }
            }
        }
        return true;
    }
}







-----------------------------------------------------------------------------------------------------

import java.util.Scanner;

public class ConnectFour {
    static final char EMPTY = '.';
    static final char PLAYER1 = 'X';
    static final char PLAYER2 = 'O';

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter game board dimensions (rows columns): ");
        int rows = scanner.nextInt();
        int columns = scanner.nextInt();

        char[][] board = new char[rows][columns];
        initializeBoard(board);

        boolean gameOver = false;
        char currentPlayer = PLAYER1;

        while (!gameOver) {
            displayBoard(board);
            System.out.println("Player " + currentPlayer + "'s turn");

            int col;
            while (true) {
                System.out.print("Enter column (0-" + (columns - 1) + "): ");
                col = scanner.nextInt();
                if (col < 0 || col >= columns) {
                    System.out.println("Invalid column. Try again.");
                } else if (board[0][col] != EMPTY) {
                    System.out.println("Column is full. Try again.");
                } else {
                    break;
                }
            }

            int row = dropDisc(board, col, currentPlayer);

            if (checkWin(board, row, col, currentPlayer)) {
                displayBoard(board);
                System.out.println("Player " + currentPlayer + " wins!");
                gameOver = true;
            } else if (isBoardFull(board)) {
                displayBoard(board);
                System.out.println("It's a tie!");
                gameOver = true;
            } else {
                currentPlayer = (currentPlayer == PLAYER1) ? PLAYER2 : PLAYER1;
            }
        }

        scanner.close();
    }

    static void initializeBoard(char[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                board[i][j] = EMPTY;
            }
        }
    }

    static void displayBoard(char[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }

    static int dropDisc(char[][] board, int col, char player) {
        for (int i = board.length - 1; i >= 0; i--) {
            if (board[i][col] == EMPTY) {
                board[i][col] = player;
                return i;
            }
        }
        return -1; // should never happen
    }

    static boolean checkWin(char[][] board, int row, int col, char player) {
        return checkDirection(board, row, col, player, 1, 0)  // horizontal
                || checkDirection(board, row, col, player, 0, 1)  // vertical
                || checkDirection(board, row, col, player, 1, 1)  // diagonal \
                || checkDirection(board, row, col, player, 1, -1); // diagonal /
    }

    static boolean checkDirection(char[][] board, int row, int col, char player, int dRow, int dCol) {
        int count = 1;
        count += countDirection(board, row, col, player, dRow, dCol);
        count += countDirection(board, row, col, player, -dRow, -dCol);
        return count >= 4;
    }

    static int countDirection(char[][] board, int row, int col, char player, int dRow, int dCol) {
        int count = 0;
        for (int i = 1; i < 4; i++) {
            int newRow = row + i * dRow;
            int newCol = col + i * dCol;
            if (newRow >= 0 && newRow < board.length && newCol >= 0 && newCol < board[0].length && board[newRow][newCol] == player) {
                count++;
            } else {
                break;
            }
        }
        return count;
    }

    static boolean isBoardFull(char[][] board) {
        for (int j = 0; j < board[0].length; j++) {
            if (board[0][j] == EMPTY) {
                return false;
            }
        }
        return true;
    }
}
***********************************************************************************************

import java.util.Random;
import java.util.Scanner;

public class WordGuessingGame {
    static final String[] WORDS = {"apple", "banana", "orange", "grape", "kiwi", "pear"};
    static final int MAX_ATTEMPTS = 6;

    public static void main(String[] args) {
        Random random = new Random();
        String wordToGuess = WORDS[random.nextInt(WORDS.length)];
        char[] guessedWord = new char[wordToGuess.length()];
        for (int i = 0; i < guessedWord.length; i++) {
            guessedWord[i] = '_';
        }

        Scanner scanner = new Scanner(System.in);
        int attempts = 0;

        System.out.println("Welcome to Word Guessing Game!");
        System.out.println("Try to guess the word:");

        while (attempts < MAX_ATTEMPTS) {
            System.out.println("Word: " + String.valueOf(guessedWord));
            System.out.print("Enter a letter: ");
            char guess = scanner.next().toLowerCase().charAt(0);
            boolean found = false;
            for (int i = 0; i < wordToGuess.length(); i++) {
                if (wordToGuess.charAt(i) == guess) {
                    guessedWord[i] = guess;
                    found = true;
                }
            }
            if (!found) {
                attempts++;
                System.out.println("Incorrect guess! Remaining attempts: " + (MAX_ATTEMPTS - attempts));
            } else {
                System.out.println("Correct guess!");
            }
            if (String.valueOf(guessedWord).equals(wordToGuess)) {
                System.out.println("Congratulations! You guessed the word: " + wordToGuess);
                break;
            }
        }

        if (attempts == MAX_ATTEMPTS) {
            System.out.println("Sorry, you couldn't guess the word. The correct word was: " + wordToGuess);
        }

        scanner.close();
    }
    ****************************************************************************************
    
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

public class WordSearch {
    static final int GRID_SIZE = 10;
    static final char[][] grid = new char[GRID_SIZE][GRID_SIZE];
    static final String[] words = {"JAVA", "PYTHON", "CPLUSPLUS", "RUBY", "HTML", "CSS", "JAVASCRIPT"};

    public static void main(String[] args) {
        initializeGrid();
        placeWords();
        fillGrid();

        Scanner scanner = new Scanner(System.in);
        System.out.println("Welcome to Word Search!");

        while (true) {
            displayGrid();
            System.out.print("Enter a word to search or 'exit' to quit: ");
            String word = scanner.nextLine().toUpperCase();

            if (word.equalsIgnoreCase("exit")) {
                System.out.println("Goodbye!");
                break;
            }

            if (findWord(word)) {
                System.out.println("Word '" + word + "' found!");
            } else {
                System.out.println("Word '" + word + "' not found.");
            }
        }

        scanner.close();
    }

    static void initializeGrid() {
        for (int i = 0; i < GRID_SIZE; i++) {
            for (int j = 0; j < GRID_SIZE; j++) {
                grid[i][j] = '.';
            }
        }
    }

    static void placeWords() {
        Random random = new Random();
        for (String word : words) {
            boolean placed = false;
            while (!placed) {
                int row = random.nextInt(GRID_SIZE);
                int col = random.nextInt(GRID_SIZE);
                boolean horizontal = random.nextBoolean();
                if (canPlaceWord(word, row, col, horizontal)) {
                    placeWord(word, row, col, horizontal);
                    placed = true;
                }
            }
        }
    }

    static boolean canPlaceWord(String word, int row, int col, boolean horizontal) {
        if (horizontal && col + word.length() <= GRID_SIZE) {
            for (int i = 0; i < word.length(); i++) {
                if (grid[row][col + i] != '.') {
                    return false;
                }
            }
            return true;
        } else if (!horizontal && row + word.length() <= GRID_SIZE) {
            for (int i = 0; i < word.length(); i++) {
                if (grid[row + i][col] != '.') {
                    return false;
                }
            }
            return true;
        }
        return false;
    }

    static void placeWord(String word, int row, int col, boolean horizontal) {
        if (horizontal) {
            for (int i = 0; i < word.length(); i++) {
                grid[row][col + i] = word.charAt(i);
            }
        } else {
            for (int i = 0; i < word.length(); i++) {
                grid[row + i][col] = word.charAt(i);
            }
        }
    }

    static void fillGrid() {
        Random random = new Random();
        for (int i = 0; i < GRID_SIZE; i++) {
            for (int j = 0; j < GRID_SIZE; j++) {
                if (grid[i][j] == '.') {
                    grid[i][j] = (char) ('A' + random.nextInt(26));
                }
            }
        }
    }

    static void displayGrid() {
        for (int i = 0; i < GRID_SIZE; i++) {
            for (int j = 0; j < GRID_SIZE; j++) {
                System.out.print(grid[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    static boolean findWord(String word) {
        for (int i = 0; i < GRID_SIZE; i++) {
            for (int j = 0; j < GRID_SIZE; j++) {
                if (findWordFromCell(word, i, j)) {
                    return true;
                }
            }
        }
        return false;
    }

    static boolean findWordFromCell(String word, int row, int col) {
        int[] dx = {0, 1, 1, 1, 0, -1, -1, -1};
        int[] dy = {1, 1, 0, -1, -1, -1, 0, 1};

        for (int dir = 0; dir < 8; dir++) {
            int r = row, c = col;
            int index = 0;
            while (index < word.length() && r >= 0 && r < GRID_SIZE && c >= 0 && c < GRID_SIZE && grid[r][c] == word.charAt(index)) {
                r += dx[dir];
                c += dy[dir];
                index++;
            }
            if (index == word.length()) {
                return true;
            }
        }
        return false;
    }
}

    *****************************************************************************************
    
import java.util.Scanner;

public class Sudoku {
    static final int SIZE = 9;
    static final int SUBGRID_SIZE = 3;
    static int[][] board = new int[SIZE][SIZE];

    public static void main(String[] args) {
        // A partially filled board for demonstration purposes
        int[][] initialBoard = {
                {5, 3, 0, 0, 7, 0, 0, 0, 0},
                {6, 0, 0, 1, 9, 5, 0, 0, 0},
                {0, 9, 8, 0, 0, 0, 0, 6, 0},
                {8, 0, 0, 0, 6, 0, 0, 0, 3},
                {4, 0, 0, 8, 0, 3, 0, 0, 1},
                {7, 0, 0, 0, 2, 0, 0, 0, 6},
                {0, 6, 0, 0, 0, 0, 2, 8, 0},
                {0, 0, 0, 4, 1, 9, 0, 0, 5},
                {0, 0, 0, 0, 8, 0, 0, 7, 9}
        };
        board = initialBoard;

        Scanner scanner = new Scanner(System.in);
        boolean gameEnd = false;

        while (!gameEnd) {
            displayBoard();
            System.out.print("Enter row (1-9), column (1-9), and number (1-9) separated by spaces, or 'exit' to quit: ");
            String input = scanner.nextLine();

            if (input.equalsIgnoreCase("exit")) {
                gameEnd = true;
                continue;
            }

            String[] parts = input.split(" ");
            if (parts.length == 3) {
                int row = Integer.parseInt(parts[0]) - 1;
                int col = Integer.parseInt(parts[1]) - 1;
                int number = Integer.parseInt(parts[2]);

                if (isValidMove(row, col, number)) {
                    board[row][col] = number;
                } else {
                    System.out.println("Invalid move. Try again.");
                }
            } else {
                System.out.println("Invalid input. Try again.");
            }

            if (isBoardFull()) {
                displayBoard();
                System.out.println("Congratulations! You've completed the Sudoku.");
                gameEnd = true;
            }
        }

        scanner.close();
    }

    static void displayBoard() {
        for (int i = 0; i < SIZE; i++) {
            if (i % SUBGRID_SIZE == 0 && i != 0) {
                System.out.println("------+-------+------");
            }
            for (int j = 0; j < SIZE; j++) {
                if (j % SUBGRID_SIZE == 0 && j != 0) {
                    System.out.print("| ");
                }
                if (board[i][j] == 0) {
                    System.out.print(". ");
                } else {
                    System.out.print(board[i][j] + " ");
                }
            }
            System.out.println();
        }
    }

    static boolean isValidMove(int row, int col, int number) {
        if (board[row][col] != 0) return false;

        for (int i = 0; i < SIZE; i++) {
            if (board[row][i] == number || board[i][col] == number) {
                return false;
            }
        }

        int subGridRowStart = (row / SUBGRID_SIZE) * SUBGRID_SIZE;
        int subGridColStart = (col / SUBGRID_SIZE) * SUBGRID_SIZE;
        for (int i = subGridRowStart; i < subGridRowStart + SUBGRID_SIZE; i++) {
            for (int j = subGridColStart; j < subGridColStart + SUBGRID_SIZE; j++) {
                if (board[i][j] == number) {
                    return false;
                }
            }
        }

        return true;
    }

    static boolean isBoardFull() {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] == 0) {
                    return false;
                }
            }
        }
        return true;
    }
}
*****************************************************************************************************

import java.util.LinkedList;
import java.util.Random;
import java.util.Scanner;

public class SnakeGame {
    static final char EMPTY = '.';
    static final char SNAKE = 'S';
    static final char FOOD = 'F';
    static int score = 0;

    static final int[] DX = {0, 1, 0, -1};
    static final int[] DY = {1, 0, -1, 0};
    static final String DIRECTIONS = "RDLU";

    static class Point {
        int x, y;
        Point(int x, int y) { this.x = x; this.y = y; }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();

        System.out.print("Enter game box dimensions (n m): ");
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        char[][] box = new char[n][m];
        initializeBox(box);

        LinkedList<Point> snake = new LinkedList<>();
        snake.add(new Point(n / 2, m / 2));
        box[n / 2][m / 2] = SNAKE;

        placeFood(box, random);

        boolean gameOver = false;
        while (!gameOver) {
            displayBox(box);

            System.out.print("Enter direction (R, D, L, U): ");
            char direction = scanner.next().charAt(0);
            int dirIndex = DIRECTIONS.indexOf(direction);
            if (dirIndex == -1) {
                System.out.println("Invalid direction! Use R, D, L, U.");
                continue;
            }

            Point head = snake.getFirst();
            Point newHead = new Point(head.x + DX[dirIndex], head.y + DY[dirIndex]);

            if (newHead.x < 0 || newHead.x >= n || newHead.y < 0 || newHead.y >= m || box[newHead.x][newHead.y] == SNAKE) {
                System.out.println("Game Over!");
                gameOver = true;
            } else {
                if (box[newHead.x][newHead.y] == FOOD) {
                    score += 10;
                    placeFood(box, random);
                } else {
                    Point tail = snake.removeLast();
                    box[tail.x][tail.y] = EMPTY;
                }
                snake.addFirst(newHead);
                box[newHead.x][newHead.y] = SNAKE;
            }

            System.out.println("Score: " + score);
        }

        scanner.close();
    }

    static void initializeBox(char[][] box) {
        for (int i = 0; i < box.length; i++) {
            for (int j = 0; j < box[i].length; j++) {
                box[i][j] = EMPTY;
            }
        }
    }

    static void displayBox(char[][] box) {
        for (char[] row : box) {
            for (char cell : row) {
                System.out.print(cell + " ");
            }
            System.out.println();
        }
    }

    static void placeFood(char[][] box, Random random) {
        int n = box.length;
        int m = box[0].length;
        int foodX, foodY;
        do {
            foodX = random.nextInt(n);
            foodY = random.nextInt(m);
        } while (box[foodX][foodY] != EMPTY);
        box[foodX][foodY] = FOOD;
    }
}



***************************************************************************************************

import java.util.Random;
import java.util.Scanner;

public class SnakeAndLadders {
    static final int BOARD_SIZE = 100;
    static final int[] LADDERS_START = {2, 7, 20, 27, 35, 46, 59, 68, 81};
    static final int[] LADDERS_END = {38, 14, 31, 84, 44, 65, 82, 91, 99};
    static final int[] SNAKES_HEAD = {19, 30, 47, 55, 60, 75, 83, 93, 97};
    static final int[] SNAKES_TAIL = {7, 12, 16, 23, 37, 28, 39, 64, 78};

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();

        int[] playerPositions = {0, 0}; // Player 1 and Player 2 positions
        int currentPlayer = 0;

        System.out.println("Welcome to Snake and Ladders!");

        while (true) {
            System.out.println("Player " + (currentPlayer + 1) + "'s turn. Press enter to roll the dice.");
            scanner.nextLine();
            int diceRoll = random.nextInt(6) + 1;
            System.out.println("You rolled a " + diceRoll + ".");

            playerPositions[currentPlayer] += diceRoll;
            playerPositions[currentPlayer] = adjustPosition(playerPositions[currentPlayer]);

            System.out.println("Player " + (currentPlayer + 1) + " moved to square " + playerPositions[currentPlayer] + ".");

            if (playerPositions[currentPlayer] == BOARD_SIZE) {
                System.out.println("Player " + (currentPlayer + 1) + " wins!");
                break;
            }

            if (isLadder(playerPositions[currentPlayer])) {
                int ladderIndex = getLadderIndex(playerPositions[currentPlayer]);
                playerPositions[currentPlayer] = LADDERS_END[ladderIndex];
                System.out.println("Player " + (currentPlayer + 1) + " climbed a ladder to square " + playerPositions[currentPlayer] + ".");
            } else if (isSnake(playerPositions[currentPlayer])) {
                int snakeIndex = getSnakeIndex(playerPositions[currentPlayer]);
                playerPositions[currentPlayer] = SNAKES_TAIL[snakeIndex];
                System.out.println("Player " + (currentPlayer + 1) + " slid down a snake to square " + playerPositions[currentPlayer] + ".");
            }

            currentPlayer = (currentPlayer + 1) % 2; // Switch players
        }

        scanner.close();
    }

    static int adjustPosition(int position) {
        if (position > BOARD_SIZE) {
            return BOARD_SIZE - (position - BOARD_SIZE);
        }
        return position;
    }

    static boolean isLadder(int position) {
        for (int i = 0; i < LADDERS_START.length; i++) {
            if (LADDERS_START[i] == position) {
                return true;
            }
        }
        return false;
    }

    static int getLadderIndex(int position) {
        for (int i = 0; i < LADDERS_START.length; i++) {
            if (LADDERS_START[i] == position) {
                return i;
            }
        }
        return -1;
    }

    static boolean isSnake(int position) {
        for (int i = 0; i < SNAKES_HEAD.length; i++) {
            if (SNAKES_HEAD[i] == position) {
                return true;
            }
        }
        return false;
    }

    static int getSnakeIndex(int position) {
        for (int i = 0; i < SNAKES_HEAD.length; i++) {
            if (SNAKES_HEAD[i] == position) {
                return i;
            }
        }
        return -1;
    }
}

//How the Game Works:
//The game initializes the player positions to 0.
//Players take turns rolling the dice by pressing Enter.
//The dice roll determines how many squares the player moves forward.
//        Players' positions are adjusted to ensure they stay within the board limits.
//If a player lands on the start of a ladder, they climb to the end of the ladder.
//If a player lands on the head of a snake, they slide down to the tail of the snake.
//        7
***************************************************************************************************

import java.util.Random;
import java.util.Scanner;

public class RockPaperScissors {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();

        String[] choices = {"Rock", "Paper", "Scissors"};
        boolean playAgain = true;

        while (playAgain) {
            System.out.println("Enter your choice (Rock, Paper, Scissors): ");
            String userChoice = scanner.nextLine();
            int computerChoiceIndex = random.nextInt(3);
            String computerChoice = choices[computerChoiceIndex];

            System.out.println("Computer chose: " + computerChoice);

            if (userChoice.equalsIgnoreCase(computerChoice)) {
                System.out.println("It's a tie!");
            } else if (isUserWin(userChoice, computerChoice)) {
                System.out.println("You win!");
            } else {
                System.out.println("You lose!");
            }

            System.out.println("Do you want to play again? (yes/no): ");
            String playAgainInput = scanner.nextLine();
            playAgain = playAgainInput.equalsIgnoreCase("yes");
        }

        scanner.close();
        System.out.println("Thanks for playing!");
    }

    private static boolean isUserWin(String userChoice, String computerChoice) {
        return (userChoice.equalsIgnoreCase("Rock") && computerChoice.equals("Scissors")) ||
                (userChoice.equalsIgnoreCase("Paper") && computerChoice.equals("Rock")) ||
                (userChoice.equalsIgnoreCase("Scissors") && computerChoice.equals("Paper"));
    }
}

******************************************************************************

import java.util.Random;
import java.util.Scanner;

public class GuessTheNumber {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();

        int minRange = 1;
        int maxRange = 100;
        int targetNumber = random.nextInt(maxRange - minRange + 1) + minRange;
        int maxAttempts = 10;
        int attempts = 0;
        int guess;

        System.out.println("Welcome to Guess the Number!");
        System.out.println("I've selected a number between " + minRange + " and " + maxRange + ". Try to guess it.");

        while (attempts < maxAttempts) {
            System.out.print("Enter your guess (Attempt " + (attempts + 1) + "/" + maxAttempts + "): ");
            guess = scanner.nextInt();

            if (guess < minRange || guess > maxRange) {
                System.out.println("Please enter a number within the range.");
                continue;
            }

            attempts++;

            if (guess == targetNumber) {
                System.out.println("Congratulations! You've guessed the number " + targetNumber + " correctly in " + attempts + " attempts.");
                break;
            } else if (guess < targetNumber) {
                System.out.println("Too low. Try again.");
            } else {
                System.out.println("Too high. Try again.");
            }
        }

        if (attempts == maxAttempts) {
            System.out.println("Sorry, you've used all your attempts. The correct number was " + targetNumber + ".");
        }

        scanner.close();
    }
}
*******************************


